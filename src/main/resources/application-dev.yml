spring-boot:
  version: 2.7.5
swagger:
  enabled: true
  pathMapping: ""
whai:
  uploadPath: ''
  jwt:
    header: Token
    expire: 3600 # s为单位
    secret: abcdefghabcdefghabcdefghabcdefgh
whaiblog:
  version: 1.0
  name: whai的博客系统
  url: whai.space
  email: whaifree@163.com

hdfs:
  enable: true
#  path: hdfs://42.192.130.83:9000
  path: hdfs://192.168.254.129:9000
  username: root



mybatis:
  mapper-locations: '"classpath:/mapper/**.xml"'
mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      logic-delete-field: 1
      logic-not-delete-value: 0
#  executor-type: simple
server:
  error:
    path: '/error '
  port: 8111
  servlet:
    session:
      timeout: 60



spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    password: 123456
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&useAffectedRows=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
    username: root

    druid:
      ## 初始化大小，最小，最大
      initial-size: 5
      min-idle: 5
      max-active: 30
      ## 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      max-pool-prepared-statement-per-connection-size: 20
      pool-prepared-statements: true
      # 用来测试连接是否可用的SQL语句
      validation-query: SELECT 1 FROM DUAL
      # 应用向连接池申请连接，并且testOnBorrow为false时，连接池将会判断连接是否处于空闲状态，如果是，则验证这条连接是否可用
      test-while-idle: true
      # 如果为true，默认是false，应用向连接池申请连接时，连接池会判断这条连接是否是可用的
      test-on-borrow: false
      # 如果为true（默认false），当应用使用完连接，连接池回收连接的时候会判断该连接是否还可用
      test-on-return: false
      ######### 配置statViewFilter（配置Druid后台管理Servlet页面），用于展示Druid的统计信息
      stat-view-servlet:
        # sql监控开关
        enabled: true
        # 访问内置监控页面的路径，内置监控页面的首页是/druid/index.html
        url-pattern: /druid/*
        # 是否允许清空统计数据，重新计算  true:允许  false:不允许
        reset-enable: true
        # 配置监控页面访问账号密码
        login-username: admin
        login-password: admin
        # 允许访问的地址，如果allow没有配置或者为空，则允许所有访问
#        allow: 127.0.0.1
        # 拒绝访问的地址，deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝
#        deny:
         # https://blog.csdn.net/qq_26383975/article/details/123424200



          ######### 配置WebStatFilter，用于采集web关联监控的数据 配置了才能监控sql#########
      web-stat-filter:
        # web url监控
        enabled: true
        # session监控
        session-stat-enable: true
        # session的最大个数，默认100
        session-stat-max-count: 1000
        # 过滤所有url
        url-pattern: /*
        # 排除一些不必要的url
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"

      # 自己配置监控统计拦截的filter
      filter:
        # 开启DruidDataSource的状态监控
        stat:
          enabled: true
          db-type: mysql
          # 开启慢sql监控，超过2s 就认为是慢sql，记录到日志中
          log-slow-sql: true
          slow-sql-millis: 2000



    type: com.alibaba.druid.pool.DruidDataSource
  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
  thymeleaf:
    cache: false
  web:
    resources:
      static-locations: '"classpath:/static/"'

  redis:
    host: localhost
    port: 6379
    database: 2

  mail:
    host: smtp.163.com
    password: 123
    username: whaifree@163.com
    port:
    default-encoding: UTF-8
    protocol: smtp

    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true
      mail.smtp.starttls.required: true
      mail.smtp.socketFactory.port: 465
      mail.smtp.socketFactory.class: javax.net.ssl.SSLSocketFactory
      mail.smtp.socketFactory.fallback: false
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
    publisher-confirm-type: correlated
    # 不可达到 返回给生产者
    # 当启用publisher-returns时，如果发送者发送的消息无法被消费者确认，消息会返回发送者。否则发送者是不知道的
    template:
      mandatory: true
    publisher-returns: true
    listener:
      simple:
        acknowledge-mode: manual
      direct:
        acknowledge-mode: manual
minio:
  url: http://42.192.130.83:9000
  bucket: picgo
  access-key: TI3NbxTVJg6M2JFfAkX5
  secret-key: kkKy0vf9k0R8DdOrJtwCeKQtlEsqAbyOEX3pxvFc




